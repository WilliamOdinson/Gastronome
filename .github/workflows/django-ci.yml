name: Django CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DJANGO_SECRET_KEY: django-secret-key
      DJANGO_ALLOWED_HOSTS: 127.0.0.1,localhost
      POSTGRES_DB: gastronome
      POSTGRES_USER: django
      POSTGRES_PASSWORD: postgres-password
      POSTGRES_HOST: 127.0.0.1
      POSTGRES_PORT: 5432
      REDIS_PASSWORD: foobared
      REDIS_URL: redis://:foobared@127.0.0.1:6379/6

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: false

      - name: Rename the example environment file to .env
        run: mv .env.example .env

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y git-lfs postgresql postgresql-contrib redis-server
          git lfs install

      - name: Initialize PostgreSQL and Redis
        run: |
          sudo service postgresql start
          sudo -u postgres psql <<SQL
          CREATE DATABASE "${{ env.POSTGRES_DB }}";
          CREATE USER "${{ env.POSTGRES_USER }}" WITH PASSWORD '${{ env.POSTGRES_PASSWORD }}';
          ALTER USER "${{ env.POSTGRES_USER }}" CREATEDB;
          GRANT ALL PRIVILEGES ON DATABASE "${{ env.POSTGRES_DB }}" TO "${{ env.POSTGRES_USER }}";
          \c ${{ env.POSTGRES_DB }}
          ALTER SCHEMA public OWNER TO "${{ env.POSTGRES_USER }}";
          GRANT ALL ON SCHEMA public TO "${{ env.POSTGRES_USER }}";
          GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO "${{ env.POSTGRES_USER }}";
          GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO "${{ env.POSTGRES_USER }}";
          GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO "${{ env.POSTGRES_USER }}";
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO "${{ env.POSTGRES_USER }}";
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO "${{ env.POSTGRES_USER }}";
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO "${{ env.POSTGRES_USER }}";
          SQL
          echo "user default on +@all ~* >${{ env.REDIS_PASSWORD }}" | sudo tee -a /etc/redis/redis.conf
          sudo service redis-server restart
          redis-cli -a "${{ env.REDIS_PASSWORD }}" PING

      - name: Compute weights pointer hash
        id: weights-hash
        run: |
          FILES=$(git ls-files assets/weights | tr '\n' ' ')
          HASH=$(sha256sum $FILES | sha256sum | cut -d' ' -f1)
          echo "HASH=$HASH" >> $GITHUB_OUTPUT

      - name: Prepare empty weights dir
        run: rm -rf assets/weights

      - name: Restore cached weights
        uses: actions/cache@v4
        id: weights-cache
        with:
          path: assets/weights
          key: weights-${{ steps.weights-hash.outputs.HASH }}

      - name: Pull weights via Git LFS
        if: steps.weights-cache.outputs.cache-hit != 'true'
        run: |
          git lfs install
          git lfs pull --include="assets/weights/**"

      - name: Get latest DistilBERT commit hash
        id: distilbert-rev
        run: |
          echo "HASH=$(git ls-remote https://huggingface.co/distilbert-base-uncased HEAD | cut -f1)" >> $GITHUB_OUTPUT

      - name: Restore DistilBERT checkpoint from cache
        uses: actions/cache@v4
        id: distilbert-cache
        with:
          path: .cache/distilbert-base-uncased
          key: distilbert-${{ steps.distilbert-rev.outputs.HASH }}

      - name: Clone DistilBERT checkpoints
        if: steps.distilbert-cache.outputs.cache-hit != 'true'
        run: |
          rm -rf .cache/distilbert-base-uncased
          git clone --depth 1 --filter=blob:none --sparse https://huggingface.co/distilbert-base-uncased .cache/distilbert-base-uncased
          cd .cache/distilbert-base-uncased
          git sparse-checkout init --no-cone
          git sparse-checkout set /config.json /tokenizer.json /tokenizer_config.json /vocab.txt /pytorch_model.bin /model.safetensors

      - name: Copy DistilBERT into assets directory
        run: |
          rm -rf assets/distilbert-base-uncased
          cp -r .cache/distilbert-base-uncased assets/distilbert-base-uncased

      - name: Set up Python 3.13 and pip cache
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations and tests
        env:
          PGHOST: ${{ env.POSTGRES_HOST }}
          PGPORT: ${{ env.POSTGRES_PORT }}
          PGUSER: ${{ env.POSTGRES_USER }}
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
          PGDATABASE: ${{ env.POSTGRES_DB }}
        run: |
          python manage.py test business user review api experiments recommend core
