"""
Django settings for Gastronome project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import sys
from pathlib import Path

from colorama import Fore, Style, init
from dotenv import load_dotenv
import sentry_sdk
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration

# ------------------------------
# I. BASE & ENVIRONMENT
# ------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env", override=True)
init(autoreset=True)

# ------------------------------
# II. SECURITY
# https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
# ------------------------------
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
DEBUG = os.getenv("DJANGO_DEBUG", "False").lower() in ("1", "true", "yes")
LOAD_TEST = os.getenv("LOAD_TEST", "False").lower() in ("1", "true", "yes")
DJANGO_TEST = len(sys.argv) > 1 and sys.argv[1] == "test"
if DEBUG:
    print(Fore.YELLOW + "[!WARNING] Django DEBUG mode is enabled.")
if LOAD_TEST:
    print(Fore.YELLOW + "[!WARNING] Load test mode is enabled.")
if LOAD_TEST and DJANGO_TEST:
    print(Fore.RED + "[ERROR] Running Django tests during load test mode is not allowed.")
    sys.exit(1)
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",")

# ------------------------------
# III. APPLICATIONS & AUTHENTICATION
# ------------------------------
INSTALLED_APPS = [
    # Django contrib apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Project apps
    'business',
    'user',
    'review',
    'api',
    'experiments',
    'recommend',
    'core',
]

AUTH_USER_MODEL = 'user.User'
LOGIN_URL = '/user/login/'

# ------------------------------
# IV. MIDDLEWARE
# ------------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ------------------------------
# V. URLS & WSGI
# ------------------------------
ROOT_URLCONF = 'Gastronome.urls'
WSGI_APPLICATION = 'Gastronome.wsgi.application'

# ------------------------------
# VI. TEMPLATES
# ------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "Gastronome" / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.category_keywords',
                'core.context_processors.rating_filters',
            ],
        },
    },
]

# ------------------------------
# VII. DATABASE
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# ------------------------------
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", ""),
        "USER": os.getenv("POSTGRES_USER", ""),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", ""),
        "HOST": os.getenv("POSTGRES_HOST", "localhost"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}

# ------------------------------
# VIII. CACHES
# ------------------------------
REDIS_HOST = os.getenv("REDIS_HOST", "127.0.0.1")
REDIS_PORT = os.getenv("REDIS_PORT", "6379")
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", "")

if REDIS_PASSWORD:
    REDIS_URL = f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/6"
else:
    REDIS_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/6"

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "decode_responses": True,
        },
        "TIMEOUT": 86400,
    }
}

# ------------------------------
# IX. SEARCH ENGINE
# ------------------------------
OPENSEARCH = {
    "HOST": os.getenv("OPENSEARCH_HOST", "http://localhost:9200"),
    "USER": os.getenv("OPENSEARCH_USER", None),
    "PASSWORD": os.getenv("OPENSEARCH_PASSWORD", None),
    "BUSINESS_INDEX": "gastronome-business",
    "REVIEW_INDEX": "gastronome-review",
    "USER_INDEX": "gastronome-user",
    "TIP_INDEX": "gastronome-tip",
}

# ------------------------------
# X. CELERY CONFIGURATION
# ------------------------------
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "pyamqp://guest:guest@localhost//")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "rpc://")
CELERY_TASK_DEFAULT_QUEUE = 'celery'
CELERY_TASK_ROUTES = {
    # business is_open status maintenance
    "business.tasks.refresh_open_status": {"queue": "business_status"},
    "business.tasks.refresh_open_batch": {"queue": "business_status"},

    # recommendation precache
    "recommend.tasks.precache_recommendations": {"queue": "recommendation"},
    "recommend.tasks.warmup_state_hotlists": {"queue": "recommendation"},
    "recommend.tasks.compute_user_recs": {"queue": "recommendation"},

    # user e-mail dispatch
    "user.tasks.send_verification_email": {"queue": "email"},

    # review automatic scoring
    "review.tasks.compute_auto_score": {"queue": "bert-predict"},
}
CELERY_TIMEZONE = "UTC"

# Enable eager tasks when running tests
if DJANGO_TEST:
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True

# ------------------------------
# XI. LOGGING & MONITORING
# ------------------------------

SENTRY_DSN = os.getenv("SENTRY_DSN", "")
SENTRY_ENVIRONMENT = os.getenv("SENTRY_ENVIRONMENT", "development")

if SENTRY_DSN and not DJANGO_TEST and not LOAD_TEST:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        # Add data like request headers and IP for users,
        # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
        send_default_pii=True,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for tracing.
        traces_sample_rate=1.0,
        # Set profile_session_sample_rate to 1.0 to profile 100%
        # of profile sessions.
        profile_session_sample_rate=1.0,
        integrations=[DjangoIntegration(), CeleryIntegration()],
        environment=SENTRY_ENVIRONMENT,
        # Set profile_lifecycle to "trace" to automatically
        # run the profiler on when there is an active transaction
        profile_lifecycle="trace",
    )

# ------------------------------
# XII. AUTH PASSWORD VALIDATORS
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
# ------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ------------------------------
# XIII. INTERNATIONALIZATION
# https://docs.djangoproject.com/en/5.2/topics/i18n/
# ------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# ------------------------------
# XIV. STATIC FILES
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# ------------------------------
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# ------------------------------
# XV. DEFAULT PRIMARY KEY FIELD TYPE
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
# ------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ------------------------------
# XVI. CUSTOM APPLICATION SETTINGS
# ------------------------------
FONT_PATH = os.path.join(BASE_DIR, "static", "fonts", "Arial.ttf")
PHOTO_BASE_URL = "https://gastronome-recommendation.s3.us-east-1.amazonaws.com/"
# While developing, we can use the console backend to print emails to the
# console cause we don't have a real email server.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
